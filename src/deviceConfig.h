// File:   deviceConfig.h
// Author: argyle
// Created on October 29, 2014, 9:02 PM
// Note: Include this header before anything that defines TRUE or FALSE!

#ifndef CONFIG_H
  #define CONFIG_H

  #ifndef EMULATE
    // Definitions for PIC target only.
    
    // PIC18F452 Configuration Bit Settings - Generated by MPLABX IDE.
    // #pragma config statements should precede project file includes.
    // Use project enums instead of #define for ON and OFF.
    #include <xc.h>

    #ifdef _MAIN_C_  // Only at the top level.
      // CONFIG1H
      #pragma config OSC = HS         // Oscillator Selection bits (HS oscillator)
      #pragma config OSCS = OFF       // Oscillator System Clock Switch Enable bit (Oscillator system clock switch option is disabled (main oscillator is source))
      // CONFIG2L
      #pragma config PWRT = OFF       // Power-up Timer Enable bit (PWRT disabled)
      #pragma config BOR = OFF        // Brown-out Reset Enable bit (Brown-out Reset disabled)
      #pragma config BORV = 20        // Brown-out Reset Voltage bits (VBOR set to 2.0V)
      // CONFIG2H
      #pragma config WDT = OFF        // Watchdog Timer Enable bit (WDT disabled (control is placed on the SWDTEN bit))
      #pragma config WDTPS = 128      // Watchdog Timer Postscale Select bits (1:128)
      // CONFIG3H
      #pragma config CCP2MUX = ON     // CCP2 Mux bit (CCP2 input/output is multiplexed with RC1)
      // CONFIG4L
      #pragma config STVR = ON        // Stack Full/Underflow Reset Enable bit (Stack Full/Underflow will cause RESET)
      #pragma config LVP = ON         // Low Voltage ICSP Enable bit (Low Voltage ICSP enabled)
      // CONFIG5L
      #pragma config CP0 = OFF        // Code Protection bit (Block 0 (000200-001FFFh) not code protected)
      #pragma config CP1 = OFF        // Code Protection bit (Block 1 (002000-003FFFh) not code protected)
      #pragma config CP2 = OFF        // Code Protection bit (Block 2 (004000-005FFFh) not code protected)
      #pragma config CP3 = OFF        // Code Protection bit (Block 3 (006000-007FFFh) not code protected)
      // CONFIG5H
      #pragma config CPB = OFF        // Boot Block Code Protection bit (Boot Block (000000-0001FFh) not code protected)
      #pragma config CPD = OFF        // Data EEPROM Code Protection bit (Data EEPROM not code protected)
      // CONFIG6L
      #pragma config WRT0 = OFF       // Write Protection bit (Block 0 (000200-001FFFh) not write protected)
      #pragma config WRT1 = OFF       // Write Protection bit (Block 1 (002000-003FFFh) not write protected)
      #pragma config WRT2 = OFF       // Write Protection bit (Block 2 (004000-005FFFh) not write protected)
      #pragma config WRT3 = OFF       // Write Protection bit (Block 3 (006000-007FFFh) not write protected)
      // CONFIG6H
      #pragma config WRTC = OFF       // Configuration Register Write Protection bit (Configuration registers (300000-3000FFh) not write protected)
      #pragma config WRTB = OFF       // Boot Block Write Protection bit (Boot Block (000000-0001FFh) not write protected)
      #pragma config WRTD = OFF       // Data EEPROM Write Protection bit (Data EEPROM not write protected)
      // CONFIG7L
      #pragma config EBTR0 = OFF      // Table Read Protection bit (Block 0 (000200-001FFFh) not protected from Table Reads executed in other blocks)
      #pragma config EBTR1 = OFF      // Table Read Protection bit (Block 1 (002000-003FFFh) not protected from Table Reads executed in other blocks)
      #pragma config EBTR2 = OFF      // Table Read Protection bit (Block 2 (004000-005FFFh) not protected from Table Reads executed in other blocks)
      #pragma config EBTR3 = OFF      // Table Read Protection bit (Block 3 (006000-007FFFh) not protected from Table Reads executed in other blocks)
      // CONFIG7H
      #pragma config EBTRB = OFF      // Boot Block Table Read Protection bit (Boot Block (000000-0001FFh) not protected from Table Reads executed in other blocks)
    #endif /* _MAIN_C_ */

    // Other includes
    #include <plib/usart.h>  // PIC18 peripheral library for the serial port.

  #endif /* EMULATE NOT DEFINED */


  // Definitions useful for all targets.

  // Oscillator
  #define FOSC 12000000      // Oscillator frequency TODO: Verify this.
  #define FINSTR (FOSC / 4)  // Instruction clock frequency
  #define INSTRUCTION_TIME (1.0 / FINSTR) // Time to execute 1 instruction (s)

  // I/O Ports - Harmless enough on the x86 target.
  #define DEBUG_LED (PORTAbits.RA2)
  #define LED_ON 0    // Debug LEDs are sinked, so their port sense is switched.
  #define LED_OFF 1
  #define DEBUG_LED_PORTCTRL (TRISAbits.TRISA2)
  #define PORT_OUTPUT 0
  #define PORT_INPUT 1

  // Serial Communications
  #define BYTETYPE_DATA 0
  #define BYTETYPE_ADDRESS 1

  // X = SPBRG value - Determines the speed of serial transmission to slaves.
  // BRGH = 0, Low speed: Baud Rate = FOSC / (64 (X + 1))
  // BRGH = 1, High speed: Baud Rate = FOSC / (16 (X + 1))
  // Define one of the following switches for the baud clock.
  #define BAUDCLOCK_HIGH
  #undef BAUDCLOCK_LOW

  // BAUDVALUE_X, in conjunction with the baud clock determines the Baud Rate
  // according to the above definitions.  Make note of rate, clock selection,
  // and oscillator speed.
  #define BAUDVALUE_X 0x08  // 83.3kHz using X=0x08, BRGH=High, FOSC=12MHz
  //#define BAUDVALUE_X 0x23  // 69.4 kHz using X=0x23, BRGH=High, FOSC=40MHz

  // Do not alter the macros below.
  #if ((defined(BAUDCLOCK_HIGH) && defined(BAUDCLOCK_LOW)) || \
      (!defined(BAUDCLOCK_HIGH) && !defined(BAUDCLOCK_LOW)))
    #error "Please define exactly one of BAUDCLOCK_HIGH or BAUDCLOCK_LOW"
  #elif defined(BAUDCLOCK_HIGH)
    #define BAUDMODE USART_BRGH_HIGH
    #define BIT_RATE ((float)(16 * (BAUDVALUE_X + 1))/FOSC)
  #elif defined(BAUDCLOCK_LOW)
    #define BAUDMODE USART_BRGH_LOW
    #define BIT_RATE ((float)(64 * (BAUDVALUE_X + 1))/FOSC)
  #endif

#endif	/* CONFIG_H */
